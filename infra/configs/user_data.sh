#!/bin/sh

# Install and configure Docker
apt-get update -y
apt-get install -y \
     apt-transport-https \
     ca-certificates \
     curl \
     gnupg-agent \
     software-properties-common

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -

add-apt-repository \
     "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"

apt-get update -y

apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose
groupadd docker

adduser --disabled-password --gecos "" cory
echo "cory ALL=(ALL:ALL) NOPASSWD: ALL" | sudo tee /etc/sudoers.d/cory
usermod -aG sudo cory
usermod -aG docker cory
newgrp docker

# Copy SSH keys from root
cp -r /root/.ssh /home/cory/.ssh
chown -R cory:cory /home/cory/.ssh

# Setup Nginx
sudo apt install nginx -y
sudo systemctl start nginx
sudo systemctl enable nginx

# Setup certbot
sudo snap install core
sudo snap refresh core
sudo snap install --classic certbot
sudo ln -s /snap/bin/certbot /usr/bin/certbot
sudo certbot --nginx --non-interactive --redirect --agree-tos -d cory.twitty.codes -m cory@twitty.codes

cat <<EOF > /etc/nginx/sites-enabled/default
##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
server {
        listen 80 default_server;
        listen [::]:80 default_server;

        # SSL configuration
        #
        # listen 443 ssl default_server;
        # listen [::]:443 ssl default_server;
        #
        # Note: You should disable gzip for SSL traffic.
        # See: https://bugs.debian.org/773332
        #
        # Read up on ssl_ciphers to ensure a secure configuration.
        # See: https://bugs.debian.org/765782
        #
        # Self signed certs generated by the ssl-cert package
        # Don't use them in a production server!
        #
        # include snippets/snakeoil.conf;

        root /var/www/html;

        # Add index.php to the list if you are using PHP
        index index.html index.htm index.nginx-debian.html;

        server_name _;

        location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                try_files \$uri \$uri/ =404;
        }

        # pass PHP scripts to FastCGI server
        #
        #location ~ \.php\$ {
        #       include snippets/fastcgi-php.conf;
        #
        #       # With php-fpm (or other unix sockets):
        #       fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
        #       # With php-cgi (or other tcp sockets):
        #       fastcgi_pass 127.0.0.1:9000;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #       deny all;
        #}
}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#       listen 80;
#       listen [::]:80;
#
#       server_name example.com;
#
#       root /var/www/example.com;
#       index index.html;
#
#       location / {
#               try_files \$uri \$uri/ =404;
#       }
#}

server {

        # SSL configuration
        #
        # listen 443 ssl default_server;
        # listen [::]:443 ssl default_server;
        #
        # Note: You should disable gzip for SSL traffic.
        # See: https://bugs.debian.org/773332
        #
        # Read up on ssl_ciphers to ensure a secure configuration.
        # See: https://bugs.debian.org/765782
        #
        # Self signed certs generated by the ssl-cert package
        # Don't use them in a production server!
        #
        # include snippets/snakeoil.conf;

        root /var/www/html;

        # Add index.php to the list if you are using PHP
        index index.html index.htm index.nginx-debian.html;
    server_name cory.twitty.codes; # managed by Certbot


        location / {
                proxy_pass http://localhost:4180;
                proxy_http_version 1.1;
                proxy_set_header Upgrade \$http_upgrade;
                proxy_set_header Connection "Upgrade";
                proxy_set_header Host \$host;
                proxy_set_header X-Real-IP \$remote_addr;
        }

        # pass PHP scripts to FastCGI server
        #
        #location ~ \.php\$ {
        #       include snippets/fastcgi-php.conf;
        #
        #       # With php-fpm (or other unix sockets):
        #       fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
        #       # With php-cgi (or other tcp sockets):
        #       fastcgi_pass 127.0.0.1:9000;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #       deny all;
        #}


}
server {


        listen 80 ;
        listen [::]:80 ;
    server_name cory.twitty.codes;

}
EOF

sudo systemctl reload nginx

cat <<EOF > /etc/cron.monthly/certbot-renew
#!/bin/bash
sudo certbot renew

EOF

cat <<EOF > /etc/oauth2-proxy.cfg
http_address="127.0.0.1:4180"
email_domains="*"
upstreams="http://127.0.0.1:8080/"
cookie_secret="<FILL ME IN>"
cookie_secure=true
provider="github"
reverse_proxy=true
client_id="<Fill ME IN>"
client_secret="<FILL ME IN>"
github_users="twittyc"
github_org="twittysworkspace"
EOF

mkdir /opt/oauth2-proxy
cd /opt/oauth2-proxy && curl -OL https://github.com/oauth2-proxy/oauth2-proxy/releases/download/v7.2.1/oauth2-proxy-v7.2.1.linux-amd64.tar.gz
cd /opt/oauth2-proxy && tar -xvf oauth2-proxy-v7.2.1.linux-amd64.tar.gz
mv /opt/oauth2-proxy/oauth2-proxy-v7.2.1.linux-amd64/oauth2-proxy /usr/local/bin/oauth2-proxy

cat <<EOF > /etc/systemd/system/oauth2-proxy.service
[Unit]
Description=oauth2-proxy daemon service
After=syslog.target network.target

[Service]
ExecStart=/usr/local/bin/oauth2-proxy --config=/etc/oauth2-proxy.cfg
ExecReload=/bin/kill -HUP $MAINPID

KillMode=process
Restart=always

[Install]
WantedBy=multi-user.target
EOF


export HOME=/root
curl -fsSL https://code-server.dev/install.sh | sh
mkdir -p /home/cory/.config/code-server
touch /home/cory/.config/code-server/config.yaml
echo 'auth: none' > /home/cory/.config/code-server/config.yaml
chown -R cory:cory /home/cory

systemctl enable --now code-server@cory
